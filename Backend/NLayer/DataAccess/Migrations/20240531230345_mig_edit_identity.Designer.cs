// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NLayer.DataAccess.Concretes.EntityFramework;

#nullable disable

namespace NLayer.DataAccess.Migrations
{
    [DbContext(typeof(FantasticUniverseProjectContext))]
    [Migration("20240531230345_mig_edit_identity")]
    partial class mig_edit_identity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NLayer.Entities.Concretes.Ability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate")
                        .HasDefaultValueSql("getDate()");

                    b.HasKey("Id");

                    b.ToTable("Abilities", (string)null);
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.AbilityCharacter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AbilityId")
                        .HasColumnType("int")
                        .HasColumnName("AbilityId");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int")
                        .HasColumnName("CharacterId");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate")
                        .HasDefaultValueSql("getDate()");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.HasIndex("CharacterId");

                    b.ToTable("AbilityCharacters", (string)null);
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.Adventure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdventureContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AdventureContent");

                    b.Property<string>("AdventureName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AdventureName");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndTime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<int>("PlanetId")
                        .HasColumnType("int")
                        .HasColumnName("PlanetId");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartTime");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate")
                        .HasDefaultValueSql("getDate()");

                    b.HasKey("Id");

                    b.HasIndex("PlanetId");

                    b.ToTable("Adventures", (string)null);
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.AdventureCharacter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdventureId")
                        .HasColumnType("int")
                        .HasColumnName("AdventureId");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int")
                        .HasColumnName("CharacterId");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate")
                        .HasDefaultValueSql("getDate()");

                    b.HasKey("Id");

                    b.HasIndex("AdventureId");

                    b.HasIndex("CharacterId");

                    b.ToTable("AdventureCharacters", (string)null);
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApprenticeId")
                        .HasColumnType("int")
                        .HasColumnName("ApprenticeId");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("BirthDate");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeathDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<int?>("MasterCharacterId")
                        .HasColumnType("int")
                        .HasColumnName("MasterCharacterId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int?>("SpeciesId")
                        .HasColumnType("int")
                        .HasColumnName("SpeciesId");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate")
                        .HasDefaultValueSql("getDate()");

                    b.HasKey("Id");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Characters", (string)null);
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.Galaxy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("UniverseId")
                        .HasColumnType("int")
                        .HasColumnName("UniverseId");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate")
                        .HasDefaultValueSql("getDate()");

                    b.HasKey("Id");

                    b.HasIndex("UniverseId");

                    b.ToTable("Galaxies", (string)null);
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.Planet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("PlanetAge")
                        .HasColumnType("int")
                        .HasColumnName("PlanetAge");

                    b.Property<int>("PlanetMass")
                        .HasColumnType("int")
                        .HasColumnName("PlanetMass");

                    b.Property<int>("PlanetTemperature")
                        .HasColumnType("int")
                        .HasColumnName("PlanetTemperature");

                    b.Property<int>("StarId")
                        .HasColumnType("int")
                        .HasColumnName("StarId");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate")
                        .HasDefaultValueSql("getDate()");

                    b.HasKey("Id");

                    b.HasIndex("StarId");

                    b.ToTable("Planets", (string)null);
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.Species", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate")
                        .HasDefaultValueSql("getDate()");

                    b.HasKey("Id");

                    b.ToTable("Species", (string)null);
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.Star", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("GalaxyId")
                        .HasColumnType("int")
                        .HasColumnName("GalaxyId");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate")
                        .HasDefaultValueSql("getDate()");

                    b.HasKey("Id");

                    b.HasIndex("GalaxyId");

                    b.ToTable("Stars", (string)null);
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.TimeLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<int>("StartingAdventureId")
                        .HasColumnType("int")
                        .HasColumnName("StartingAdventureId");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate")
                        .HasDefaultValueSql("getDate()");

                    b.HasKey("Id");

                    b.HasIndex("StartingAdventureId");

                    b.ToTable("TimeLines", (string)null);
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.Union", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Target");

                    b.Property<int?>("UnionLeaderId")
                        .HasColumnType("int")
                        .HasColumnName("UnionLeaderId");

                    b.Property<int>("UniverseId")
                        .HasColumnType("int")
                        .HasColumnName("UniverseId");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate")
                        .HasDefaultValueSql("getDate()");

                    b.HasKey("Id");

                    b.HasIndex("UniverseId");

                    b.ToTable("Unions", (string)null);
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.UnionCharacter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int")
                        .HasColumnName("CharacterId");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<int>("UnionId")
                        .HasColumnType("int")
                        .HasColumnName("UnionId");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate")
                        .HasDefaultValueSql("getDate()");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("UnionId");

                    b.ToTable("UnionCharacters", (string)null);
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.Universe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate")
                        .HasDefaultValueSql("getDate()");

                    b.HasKey("Id");

                    b.ToTable("Universes", (string)null);
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.AbilityCharacter", b =>
                {
                    b.HasOne("NLayer.Entities.Concretes.Ability", "Ability")
                        .WithMany("AbilityCharacters")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NLayer.Entities.Concretes.Character", "Character")
                        .WithMany("AbilityCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.Adventure", b =>
                {
                    b.HasOne("NLayer.Entities.Concretes.Planet", "Planet")
                        .WithMany("Adventures")
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.AdventureCharacter", b =>
                {
                    b.HasOne("NLayer.Entities.Concretes.Adventure", "Adventure")
                        .WithMany("AdventureCharacters")
                        .HasForeignKey("AdventureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NLayer.Entities.Concretes.Character", "Character")
                        .WithMany("AdventureCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adventure");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.Character", b =>
                {
                    b.HasOne("NLayer.Entities.Concretes.Species", "Species")
                        .WithMany("Characters")
                        .HasForeignKey("SpeciesId");

                    b.Navigation("Species");
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.Galaxy", b =>
                {
                    b.HasOne("NLayer.Entities.Concretes.Universe", "Universe")
                        .WithMany("Galaxies")
                        .HasForeignKey("UniverseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Universe");
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.Planet", b =>
                {
                    b.HasOne("NLayer.Entities.Concretes.Star", "Star")
                        .WithMany("Planets")
                        .HasForeignKey("StarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Star");
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.Star", b =>
                {
                    b.HasOne("NLayer.Entities.Concretes.Galaxy", "Galaxy")
                        .WithMany("Stars")
                        .HasForeignKey("GalaxyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Galaxy");
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.TimeLine", b =>
                {
                    b.HasOne("NLayer.Entities.Concretes.Adventure", "Adventure")
                        .WithMany("TimeLines")
                        .HasForeignKey("StartingAdventureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adventure");
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.Union", b =>
                {
                    b.HasOne("NLayer.Entities.Concretes.Universe", "Universe")
                        .WithMany("Unions")
                        .HasForeignKey("UniverseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Universe");
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.UnionCharacter", b =>
                {
                    b.HasOne("NLayer.Entities.Concretes.Character", "Character")
                        .WithMany("UnionCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NLayer.Entities.Concretes.Union", "Union")
                        .WithMany("UnionCharacters")
                        .HasForeignKey("UnionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Union");
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.Ability", b =>
                {
                    b.Navigation("AbilityCharacters");
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.Adventure", b =>
                {
                    b.Navigation("AdventureCharacters");

                    b.Navigation("TimeLines");
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.Character", b =>
                {
                    b.Navigation("AbilityCharacters");

                    b.Navigation("AdventureCharacters");

                    b.Navigation("UnionCharacters");
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.Galaxy", b =>
                {
                    b.Navigation("Stars");
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.Planet", b =>
                {
                    b.Navigation("Adventures");
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.Species", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.Star", b =>
                {
                    b.Navigation("Planets");
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.Union", b =>
                {
                    b.Navigation("UnionCharacters");
                });

            modelBuilder.Entity("NLayer.Entities.Concretes.Universe", b =>
                {
                    b.Navigation("Galaxies");

                    b.Navigation("Unions");
                });
#pragma warning restore 612, 618
        }
    }
}
